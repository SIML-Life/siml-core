// automatically generated by the FlatBuffers compiler, do not modify


// @generated

extern crate flatbuffers;

pub enum ActionOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Action: What the agent sends back to the environment.
/// This also must be generic.
pub struct Action<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Action<'a> {
  type Inner = Action<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Action<'a> {
  pub const VT_DIRECTION: flatbuffers::VOffsetT = 4;
  pub const VT_USE_ENERGY: flatbuffers::VOffsetT = 6;
  pub const VT_EMIT_SIGNAL: flatbuffers::VOffsetT = 8;
  pub const VT_EXTRA: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Action { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ActionArgs<'args>
  ) -> flatbuffers::WIPOffset<Action<'bldr>> {
    let mut builder = ActionBuilder::new(_fbb);
    if let Some(x) = args.extra { builder.add_extra(x) }
    if let Some(x) = args.direction { builder.add_direction(x) }
    builder.add_emit_signal(args.emit_signal);
    builder.add_use_energy(args.use_energy);
    builder.finish()
  }


  #[inline]
  pub fn direction(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(Action::VT_DIRECTION, None)}
  }
  #[inline]
  pub fn use_energy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Action::VT_USE_ENERGY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn emit_signal(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(Action::VT_EMIT_SIGNAL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn extra(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Action::VT_EXTRA, None)}
  }
}

impl flatbuffers::Verifiable for Action<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("direction", Self::VT_DIRECTION, false)?
     .visit_field::<bool>("use_energy", Self::VT_USE_ENERGY, false)?
     .visit_field::<u8>("emit_signal", Self::VT_EMIT_SIGNAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("extra", Self::VT_EXTRA, false)?
     .finish();
    Ok(())
  }
}
pub struct ActionArgs<'a> {
    pub direction: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub use_energy: bool,
    pub emit_signal: u8,
    pub extra: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for ActionArgs<'a> {
  #[inline]
  fn default() -> Self {
    ActionArgs {
      direction: None,
      use_energy: false,
      emit_signal: 0,
      extra: None,
    }
  }
}

pub struct ActionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ActionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_direction(&mut self, direction: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Action::VT_DIRECTION, direction) }
  #[inline]
  pub fn add_use_energy(&mut self, use_energy: bool) {
    self.fbb_.push_slot::<bool>(Action::VT_USE_ENERGY, use_energy, false) }
  #[inline]
  pub fn add_emit_signal(&mut self, emit_signal: u8) {
    self.fbb_.push_slot::<u8>(Action::VT_EMIT_SIGNAL, emit_signal, 0) }
  #[inline]
  pub fn add_extra(&mut self, extra: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Action::VT_EXTRA, extra) }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ActionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ActionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Action<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Action<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Action");
      ds.field("direction", &self.direction());
      ds.field("use_energy", &self.use_energy());
      ds.field("emit_signal", &self.emit_signal());
      ds.field("extra", &self.extra());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Action`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_action_unchecked`.
pub fn root_as_action(buf: &[u8]) -> Result<Action, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Action>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Action` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_action_unchecked`.
pub fn size_prefixed_root_as_action(buf: &[u8]) -> Result<Action, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Action>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Action` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_action_unchecked`.
pub fn root_as_action_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Action<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Action<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Action` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_action_unchecked`.
pub fn size_prefixed_root_as_action_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Action<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Action<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Action and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Action`.
pub unsafe fn root_as_action_unchecked(buf: &[u8]) -> Action {
  unsafe { flatbuffers::root_unchecked::<Action>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Action and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Action`.
pub unsafe fn size_prefixed_root_as_action_unchecked(buf: &[u8]) -> Action {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Action>(buf) }
}
#[inline]
pub fn finish_action_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Action<'a>>) {
  fbb.finish(root, None) }

#[inline]
pub fn finish_size_prefixed_action_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Action<'a>>) {
  fbb.finish_size_prefixed(root, None) }