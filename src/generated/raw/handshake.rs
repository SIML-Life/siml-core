// automatically generated by the FlatBuffers compiler, do not modify


// @generated

extern crate flatbuffers;

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ROLE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ROLE: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ROLE: [Role; 3] = [
  Role::Unknown,
  Role::Agent,
  Role::Environment,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Role(pub i8);
#[allow(non_upper_case_globals)]
impl Role {
  pub const Unknown: Self = Self(0);
  pub const Agent: Self = Self(1);
  pub const Environment: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Unknown,
    Self::Agent,
    Self::Environment,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Unknown => Some("Unknown"),
      Self::Agent => Some("Agent"),
      Self::Environment => Some("Environment"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Role {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Role {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe { flatbuffers::read_scalar_at::<i8>(buf, loc) };
    Self(b)
  }
}

impl flatbuffers::Push for Role {
    type Output = Role;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0) }
    }
}

impl flatbuffers::EndianScalar for Role {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Role {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Role {}
pub enum HandshakeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Handshake<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Handshake<'a> {
  type Inner = Handshake<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Handshake<'a> {
  pub const VT_AGENT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ROLE: flatbuffers::VOffsetT = 6;
  pub const VT_AGENT_TYPE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Handshake { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HandshakeArgs<'args>
  ) -> flatbuffers::WIPOffset<Handshake<'bldr>> {
    let mut builder = HandshakeBuilder::new(_fbb);
    if let Some(x) = args.agent_type { builder.add_agent_type(x) }
    builder.add_agent_id(args.agent_id);
    builder.add_role(args.role);
    builder.finish()
  }


  #[inline]
  pub fn agent_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Handshake::VT_AGENT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn role(&self) -> Role {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Role>(Handshake::VT_ROLE, Some(Role::Unknown)).unwrap()}
  }
  #[inline]
  pub fn agent_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Handshake::VT_AGENT_TYPE, None)}
  }
}

impl flatbuffers::Verifiable for Handshake<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    v.visit_table(pos)?
     .visit_field::<u32>("agent_id", Self::VT_AGENT_ID, false)?
     .visit_field::<Role>("role", Self::VT_ROLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("agent_type", Self::VT_AGENT_TYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct HandshakeArgs<'a> {
    pub agent_id: u32,
    pub role: Role,
    pub agent_type: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for HandshakeArgs<'a> {
  #[inline]
  fn default() -> Self {
    HandshakeArgs {
      agent_id: 0,
      role: Role::Unknown,
      agent_type: None,
    }
  }
}

pub struct HandshakeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HandshakeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_agent_id(&mut self, agent_id: u32) {
    self.fbb_.push_slot::<u32>(Handshake::VT_AGENT_ID, agent_id, 0) }
  #[inline]
  pub fn add_role(&mut self, role: Role) {
    self.fbb_.push_slot::<Role>(Handshake::VT_ROLE, role, Role::Unknown) }
  #[inline]
  pub fn add_agent_type(&mut self, agent_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Handshake::VT_AGENT_TYPE, agent_type) }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HandshakeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HandshakeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Handshake<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Handshake<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Handshake");
      ds.field("agent_id", &self.agent_id());
      ds.field("role", &self.role());
      ds.field("agent_type", &self.agent_type());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Handshake`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_handshake_unchecked`.
pub fn root_as_handshake(buf: &[u8]) -> Result<Handshake, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Handshake>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Handshake` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_handshake_unchecked`.
pub fn size_prefixed_root_as_handshake(buf: &[u8]) -> Result<Handshake, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Handshake>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Handshake` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_handshake_unchecked`.
pub fn root_as_handshake_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Handshake<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Handshake<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Handshake` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_handshake_unchecked`.
pub fn size_prefixed_root_as_handshake_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Handshake<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Handshake<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Handshake and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Handshake`.
pub unsafe fn root_as_handshake_unchecked(buf: &[u8]) -> Handshake {
  unsafe { flatbuffers::root_unchecked::<Handshake>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Handshake and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Handshake`.
pub unsafe fn size_prefixed_root_as_handshake_unchecked(buf: &[u8]) -> Handshake {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Handshake>(buf) }
}
#[inline]
pub fn finish_handshake_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Handshake<'a>>) {
  fbb.finish(root, None) }

#[inline]
pub fn finish_size_prefixed_handshake_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Handshake<'a>>) {
  fbb.finish_size_prefixed(root, None) }