// automatically generated by the FlatBuffers compiler, do not modify


// @generated

extern crate flatbuffers;

pub enum PositionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Position<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Position<'a> {
  type Inner = Position<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Position<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_Z: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Position { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PositionArgs
  ) -> flatbuffers::WIPOffset<Position<'bldr>> {
    let mut builder = PositionBuilder::new(_fbb);
    builder.add_z(args.z);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Position::VT_X, Some(0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Position::VT_Y, Some(0)).unwrap()}
  }
  #[inline]
  pub fn z(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Position::VT_Z, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Position<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    v.visit_table(pos)?
     .visit_field::<i32>("x", Self::VT_X, false)?
     .visit_field::<i32>("y", Self::VT_Y, false)?
     .visit_field::<i32>("z", Self::VT_Z, false)?
     .finish();
    Ok(())
  }
}
pub struct PositionArgs {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}
impl<'a> Default for PositionArgs {
  #[inline]
  fn default() -> Self {
    PositionArgs {
      x: 0,
      y: 0,
      z: 0,
    }
  }
}

pub struct PositionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PositionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_x(&mut self, x: i32) {
    self.fbb_.push_slot::<i32>(Position::VT_X, x, 0) }
  #[inline]
  pub fn add_y(&mut self, y: i32) {
    self.fbb_.push_slot::<i32>(Position::VT_Y, y, 0) }
  #[inline]
  pub fn add_z(&mut self, z: i32) {
    self.fbb_.push_slot::<i32>(Position::VT_Z, z, 0) }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PositionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PositionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Position<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Position<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Position");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("z", &self.z());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Position`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_position_unchecked`.
pub fn root_as_position(buf: &[u8]) -> Result<Position, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Position>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Position` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_position_unchecked`.
pub fn size_prefixed_root_as_position(buf: &[u8]) -> Result<Position, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Position>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Position` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_position_unchecked`.
pub fn root_as_position_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Position<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Position<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Position` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_position_unchecked`.
pub fn size_prefixed_root_as_position_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Position<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Position<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Position and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Position`.
pub unsafe fn root_as_position_unchecked(buf: &[u8]) -> Position {
  unsafe { flatbuffers::root_unchecked::<Position>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Position and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Position`.
pub unsafe fn size_prefixed_root_as_position_unchecked(buf: &[u8]) -> Position {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Position>(buf) }
}
#[inline]
pub fn finish_position_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Position<'a>>) {
  fbb.finish(root, None) }

#[inline]
pub fn finish_size_prefixed_position_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Position<'a>>) {
  fbb.finish_size_prefixed(root, None) }